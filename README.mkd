# Savable MessageDigest

## Usage

### Get digest as normal.

```java
import com.kii.qb.savable_messagedigest.MD5Digester;

static byte[] getDigest(byte[] inbuf)
{
    MD5Digester d = new MD5Digester();
    d.update(inbuf);
    return d.digest();
}
```

### Get intermediate digest and suspended state data.

```java
import java.io.DataOutputStream;
import java.io.IOException;
import com.kii.qb.savable_messagedigest.MD5Digester;

static byte[] getDigestAndSuspendData(
        byte[] inbuf,
        DataOutputStream suspendDataStream)
    throws IOException
{
    MD5Digester d = new MD5Digester();
    d.update(inbuf);

    // Save intermediate state to stream.
    d.save(suspendDataStream);

    return d.digest();
}
```

### Get digest from suspended data with resuming.

```java
import java.io.DataInputStream;
import java.io.IOException;
import com.kii.qb.savable_messagedigest.MD5Digester;

static byte[] getDigestAndSuspendData(
        DataInputStream suspendedDataStream,
        byte[] inbuf)
    throws IOException
{
    MD5Digester d = new MD5Digester();

    // Load intermediate state from stream.
    d.load(suspendedDataStream);

    d.update(inbuf);
    return d.digest();
}
```

### Use a map to store intermediate state.

```java
import java.util.Map;
import com.kii.qb.savable_messagedigest.MD5Digester;

static byte[] getDigestAndSuspendData(
        byte[] inbuf,
        Map<String, Object> suspendDataMap)
{
    MD5Digester d = new MD5Digester();
    d.update(inbuf);

    // Save intermediate state to a map.
    d.save(suspendDataMap);

    return d.digest();
}

static byte[] getDigestAndSuspendData(
        Map<String, Object> suspendDataMap,
        byte[] inbuf)
    throws RuntimeException
{
    MD5Digester d = new MD5Digester();

    // Load intermediate state from a map.
    d.load(suspendDataMap);

    d.update(inbuf);
    return d.digest();
}
```

## Concerns

  * Not optimized memory copy: not good for large data.
  * Not optimized function calls.
